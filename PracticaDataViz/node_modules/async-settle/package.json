{
  "_args": [
    [
      {
        "raw": "async-settle@^0.2.1",
        "scope": null,
        "escapedName": "async-settle",
        "name": "async-settle",
        "rawSpec": "^0.2.1",
        "spec": ">=0.2.1 <0.3.0",
        "type": "range"
      },
      "/Users/miguelmonzon/Documents/GitProyects/DataViz-DojoRandori/node_modules/bach"
    ]
  ],
  "_from": "async-settle@>=0.2.1 <0.3.0",
  "_id": "async-settle@0.2.1",
  "_inCache": true,
  "_location": "/async-settle",
  "_npmUser": {
    "name": "phated",
    "email": "blaine@iceddev.com"
  },
  "_npmVersion": "1.4.21",
  "_phantomChildren": {
    "once": "1.4.0",
    "stream-exhaust": "1.0.1",
    "wrappy": "1.0.2"
  },
  "_requested": {
    "raw": "async-settle@^0.2.1",
    "scope": null,
    "escapedName": "async-settle",
    "name": "async-settle",
    "rawSpec": "^0.2.1",
    "spec": ">=0.2.1 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/bach"
  ],
  "_resolved": "https://registry.npmjs.org/async-settle/-/async-settle-0.2.1.tgz",
  "_shasum": "767462d5738008dc75eac4246223528f21371396",
  "_shrinkwrap": null,
  "_spec": "async-settle@^0.2.1",
  "_where": "/Users/miguelmonzon/Documents/GitProyects/DataViz-DojoRandori/node_modules/bach",
  "author": {
    "name": "Blaine Bublitz",
    "email": "blaine@iceddev.com",
    "url": "http://iceddev.com/"
  },
  "bugs": {
    "url": "https://github.com/phated/async-settle/issues"
  },
  "dependencies": {
    "async-done": "^0.4.0"
  },
  "description": "Settle your async functions - when you need to know all your parallel functions are complete (success or failure)",
  "devDependencies": {
    "tap": "^0.4.8"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "767462d5738008dc75eac4246223528f21371396",
    "tarball": "https://registry.npmjs.org/async-settle/-/async-settle-0.2.1.tgz"
  },
  "gitHead": "a1571d6caa3e883758cd4f083c9a1a93eedd6f22",
  "homepage": "https://github.com/phated/async-settle",
  "keywords": [
    "settle",
    "async",
    "async-done",
    "complete",
    "error",
    "parallel"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "phated",
      "email": "blaine@iceddev.com"
    }
  ],
  "name": "async-settle",
  "optionalDependencies": {},
  "readme": "async-settle\n============\n\n[![build status](https://secure.travis-ci.org/phated/async-settle.png)](http://travis-ci.org/phated/async-settle)\n\nSettle your async functions - when you need to know all your parallel functions are complete (success or failure)\n\n## API\n\n### `settle(executor, onComplete)` : Function\n\nTakes a function to execute (`executor`) and a function to call on completion (`onComplete`).\n\n`executer` is executed in the context of [`async-done`](https://github.com/phated/async-done), with all errors and results being settled.\n\n`onComplete` will be called with a settled value.\n\n#### Settled Values\n\nSettled values have two properties, `state` and `value`.\n\n`state` has two possible options `'error'` and `'success'`.\n\n`value` will be the value passed to original callback.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/phated/async-settle.git"
  },
  "scripts": {
    "test": "tap ./test"
  },
  "version": "0.2.1"
}
